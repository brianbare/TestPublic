%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: fcf7219bab7fe46a1ad266029b2fee19, type: 3}
  m_Name: Image Tracking AR ReadMe
  m_EditorClassIdentifier: 
  icon: {fileID: 2800000, guid: 77401fffc5f3e3143a3b1dbc41e85b0b, type: 3}
  title: Setting Up AR Image Tracking in the Reflect Viewer
  sections:
  - heading: 
    text: This viewer builds on top of the default Reflect viewer to add Image Target
      tracking in multiple forms. The following is an overview for getting image
      target tracking implemented from Revit into your viewer.
    linkText: 
    url: 
  - heading: Reflect Image Targets
    text: 'The XR Image Reference Library is your database of targets to use for
      the viewer. Here is where you assign the image, name and size to each image
      target. The physical size of the target is set here, not in Revit, however
      the name of the target will be used in Revit. An example library is located
      here:'
    linkText: Reflect Image Targets
    url: ReflectImageTargets t:XRReferenceImageLibrary
  - heading: Image Tracking Manager
    text: 'The Image Tracking Manager communicates with the tracking handlers as
      images are found and lost. On this manager you can assign the AR Session Origins
      to be affected, the XR Image Reference Library to use, and what kind of tracking
      handles each image (e.g. table top image tracking, floor name room scale tracking,
      etc.). The Image Tracking Manager is found on the game object named:'
    linkText: Managers
    url: 
  - heading: Specific Tracking Handlers
    text: 'A specific tracking handler is assigned to each image target and the assignment
      is made on the Image Tracking Manager (see above). Each handler provides its
      unique way of responding to found and lost tracking, what kind of AR is used
      (e.g. full scale, tabletop, etc.), how to enter and exit AR mode, etc. If you
      do not have a need for a specific handler then you can disable it on the game
      object named:'
    linkText: AR Session and Handlers
    url: 
  - heading: 
    text: <b>Image Name Tracking Handler</b> matches the name of the image assigned
      in the XR Reference Image Library with a parameter name assigned in Revit.
      The position and rotation of that parameterized object in Revit is matched
      to the center of the image target in the real world. The type of AR used with
      this handler is full scale and the image target can be placed on horizontal
      and vertical surfaces.
    linkText: 
    url: 
  - heading: 
    text: <b>Room Floor Image Tracking Handler</b> uses a custom parameter name assigned
      to a floor in Revit to then locate the image target at the top center of that
      floor mesh in the model. The type of AR used with this handler is full scale
      and the image needs to be placed flat on the floor.
    linkText: 
    url: 
  - heading: 
    text: <b>Table Top Image Tracking Handler</b> scales the entire model down so
      it can be seen on an image target. The type of AR used is Table Top and an
      example of this case could be a drawing sheet used as an image target with
      the model appearing on top of the drawing.
    linkText: 
    url: 
  - heading: Custom Parameters in Revit for each Handler
    text: 'The default custom parameter name for the <b>Image Name Tracking Handler</b>
      is Image Name. The value of this parameter in Revit is to be set to the name
      of the image target. This custom parameter can be assigned to a custom Revit
      family (see below for an example) or existing family. The position and rotation
      of this object in Revit should be the location desired in AR when the image
      is tracked. The default name of the parameter can be changed on the Image Name
      Location Controller script on the game object named:'
    linkText: Tracking All Image Targets Canvas
    url: 
  - heading: 
    text: 'The default custom parameter name for the <b>Room Floor Image Tracking
      Handler</b> is Camera Location. The value of this parameter in Revit will be
      displayed in a menu at runtime, and when selected, AR starts at this floor
      location. This custom parameter is assigned to a floor family in Revit and
      the default name of the parameter can be changed on the Camera Selection Menu
      script on the game object named:'
    linkText: Camera Position Canvas
    url: 
  - heading: 
    text: 'The default behavior of the <b>Table Top Image Tracking Handler</b> is
      to use the first floor found in a metadata search and place the position of
      that floor on the center of the target. Both the default custom parameter and
      its matching value assigned in Revit can be changed on the Table Top Image
      Target AR Top Menu script on the game object named:'
    linkText: TableTop Image Target Canvas
    url: 
  - heading: 
    text: 'The sensitivity controls for rotate and zoom on the AR Table Top Camera
      Controller can be changed on the game object named:'
    linkText: AR Camera Image Tracking
    url: 
  - heading: Metadata Searches
    text: "The Revit metadata is found at runtime by using the Metadata component
      that will be created on each of the model\u2019s game objects at runtime. You
      can see what this will look like in play mode or by importing your Revit model
      into the project via the Reflect window."
    linkText: Unity Reflect Learn Tutorial
    url: https://learn.unity.com/project/importing-assets-into-unity-with-reflect?courseId=5dd58fc1edbc2a001f5b0b32
  - heading: 
    text: 'There are various techniques that can be used to search and deliver results
      from the Metadata component. I created a Reflect Metadata Manager script component
      which is found on the gameobject named:'
    linkText: Managers
    url: 
  - heading: 
    text: 'This manager consolidates the various components that want to search for
      metadata into one appropriately timed search through the model and then sends
      targeted matches to components that have attached itself to the manager. An
      example Search Group can be found in an editor sample search which is found
      in the editor script file called:'
    linkText: MetadataEditorExplorer.cs
    url: MetadataEditorExplorer
  - heading: 
    text: To see the sample window in action, bring your Reflect imported model into
      the scene and then
    linkText: Launch the sample editor window
    url: ExecuteMenuItem:Reflect/Sample Metadata Explorer
  - heading: Branded Viewer
    text: 'The logo displayed in the viewer can be changed by adding a new photo
      (png, jpg, etc) to the project, changing the Texture Type to Sprite (2D and
      UI), and then switching out the Image on the game object named:'
    linkText: Brand Logo
    url: 
  - heading: Image Target Revit Family
    text: Linked below is an example of a custom Revit family that can be brought
      and placed in the Revit model. For the instance of the family in Revit, set
      the value of the Image Name parameter to the name of the image target as described
      above.
    linkText: Image Target Revit Family
    url: Image_Target
  loadedLayout: 1
